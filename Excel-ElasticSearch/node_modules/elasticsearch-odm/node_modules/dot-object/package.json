{
  "name": "dot-object",
  "description": "dot-object makes it possible to transform and read (JSON) objects using dot notation.",
  "version": "1.4.1",
  "author": {
    "name": "Rob Halff",
    "email": "rob.halff@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/rhalff/dot-object.git"
  },
  "bugs": {
    "url": "https://github.com/rhalff/dot-object/issues"
  },
  "main": "index",
  "bin": {
    "dot-object": "./bin/dot-object"
  },
  "scripts": {
    "test": "gulp test",
    "watch": "gulp watch",
    "lint": "gulp lint",
    "dist": "gulp dist"
  },
  "standard": {
    "globals": [
      "it",
      "describe",
      "beforeEach"
    ]
  },
  "devDependencies": {
    "gulp": "^3.9.0",
    "gulp-beautify": "^2.0.0",
    "gulp-headerfooter": "^1.0.3",
    "gulp-mocha": "^2.1.3",
    "gulp-rename": "^1.2.2",
    "gulp-standard": "^5.2.2",
    "gulp-uglify": "^1.2.0",
    "gulp-util": "^3.0.6",
    "mocha": "2.x.x",
    "should": "7.x.x",
    "underscore.string": "latest"
  },
  "keywords": [
    "json",
    "filter",
    "transform",
    "dot notation",
    "dot"
  ],
  "dependencies": {
    "commander": "^2.8.1",
    "glob": "^5.0.14"
  },
  "readme": "[![Build Status](https://travis-ci.org/rhalff/dot-object.png)](https://travis-ci.org/rhalff/dot-object)\n\nDot-Object\n========\n\nDot-Object makes it possible to transform javascript objects using dot notation.\n\n### Installation\n\nInstall from npm:\n```\n  npm install dot-object --save\n```\n\nInstall from bower:\n\n```\n  bower install dot-object --save\n```\n\n### Download\n\n  * Development version: https://npmcdn.com/dot-object/dist/dot-object.js *Uncompressed with Comments*\n  * Production version: https://npmcdn.com/dot-object/dist/dot-object.min.js *Minified*\n\n## Usage\n\n#### Move a property within one object to another location\n```javascript\nvar dot = require('dot-object');\n\nvar obj = {\n  'first_name': 'John',\n  'last_name': 'Doe'\n};\n\ndot.move('first_name', 'contact.firstname', obj);\ndot.move('last_name', 'contact.lastname', obj);\n\nconsole.log(obj);\n\n{\n  contact: {\n    firstname: 'John',\n    lastname: 'Doe'\n  }\n}\n\n```\n\n#### Copy property from one object to another\n```javascript\nvar dot = require('dot-object');\n\nvar src = {\n  name: 'John',\n  stuff: {\n    phone: {\n      brand: 'iphone',\n      version: 6\n    }\n  }\n};\n\nvar tgt = {name: 'Brandon'};\n\ndot.copy('stuff.phone', 'wanna.haves.phone', src, tgt);\n\nconsole.log(tgt);\n\n{\n  name: 'Brandon',\n  wanna: {\n    haves: {\n      phone: {\n        brand: 'iphone',\n        version: 6\n      }\n    }\n  }\n}\n\n```\n\n#### Transfer property from one object to another\n\nDoes the same as copy but removes the value from the source object:\n\n```javascript\ndot.transfer('stuff.phone', 'wanna.haves.phone', src, tgt);\n\n// src: {\"name\":\"John\",\"stuff\":{}}\n// tgt: {\"name\":\"Brandon\",\"wanna\":{\"haves\":{\"phone\":{\"brand\":\"iphone\",\"version\":6}}}\n```\n\n\n#### Expand to an object\n\n```javascript\nvar dot = require('dot-object');\n\nvar row = {\n  'id': 2,\n  'contact.name.first': 'John',\n  'contact.name.last': 'Doe',\n  'contact.email': 'example@gmail.com',\n  'contact.info.about.me': 'classified',\n  'devices[0]': 'mobile',\n  'devices[1]': 'laptop',\n  'some.other.things.0': 'this',\n  'some.other.things.1': 'that'\n};\n\ndot.object(row);\n\nconsole.log(row);\n\n{\n  \"id\": 2,\n  \"contact\": {\n    \"name\": {\n      \"first\": \"John\",\n      \"last\": \"Doe\"\n    },\n    \"email\": \"example@gmail.com\",\n    \"info\": {\n      \"about\": {\n        \"me\": \"classified\"\n      }\n    }\n  },\n  \"devices\": [\n    \"mobile\",\n    \"laptop\"\n  ],\n  \"some\": {\n    \"other\": {\n      \"things\": [\n        \"this\",\n        \"that\"\n      ]\n    }\n  }\n}\n```\n\nTo convert manually per string use:\n```javascript\nvar dot = require('dot-object');\n\nvar tgt = { val: 'test' };\ndot.str('this.is.my.string', 'value', tgt);\n\nconsole.log(tgt);\n\n{\n  \"val\": \"test\",\n  \"this\": {\n    \"is\": {\n      \"my\": {\n        \"string\": \"value\"\n      }\n    }\n  }\n}\n```\n\n#### Pick/remove a value using dot notation:\n```\nvar dot = require('dot-object');\n\nvar obj = {\n some: {\n   nested: {\n     value: 'Hi there!'\n   }\n }\n};\n\nvar val = dot.pick('some.nested.value', obj);\nconsole.log(val);\n\nHi there!\n\n// Pick & Remove the value\nval = dot.pick('some.nested.value', obj, true);\n\n// shorthand\nval = dot.remove('some.nested.value', obj);\n\n// or use the alias `del`\nval = dot.del('some.nested.value', obj);\n\n```\n\n### Using modifiers\n\nYou can use modifiers to translate values on the fly.\n\nThis example uses the [underscore.string](https://github.com/epeli/underscore.string) library.\n\n\n\n```javascript\nvar dot = require('dot-object');\n\nvar _s = require('underscore.string');\n\nvar row = {\n  'nr': 200,\n  'doc.name': '    My Document   '\n};\n\nvar mods = {\n  \"doc.name\": [_s.trim, _s.underscored],\n};\n\ndot.object(row, mods);\n\nconsole.log(row);\n```\n\n```\n{\n  \"nr\": 200,\n  \"doc\": {\n    \"name\": \"my_document\"\n  }\n}\n```\n\nOr using .str() directy:\n\n```javascript\n\nvar dot = require('dot-object');\nvar _s = require('underscore.string');\nvar obj = { id: 100 };\n\n// use one modifier\ndot.str('my.title', 'this is my title', obj, _s.slugify);\n\n// multiple modifiers\ndot.str('my.title', '   this is my title  ', obj, [_s.trim, _s.slugify]);\n\nconsole.log(obj);\n```\nResult:\n```json\n{\n  \"id\": 100,\n  \"my\": {\n    \"title\": \"this-is-my-title\"\n  }\n}\n```\n\n#### Transform object\n\n```javascript\nvar dot = require('dot-object');\n\nvar source = {\n  \"id\": 1,\n  \"contact\": {\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\",\n    \"email\": \"example@gmail.com\",\n  }\n}\n\nvar recipe = {\n  'id': 'nr',\n  'contact.firstName': 'name.first',\n  'contact.lastName': 'name.last',\n  'contact.email': 'email'\n};\n\nvar tgt = {}\ndot.transform(recipe, source, tgt);\n\n// OR\n\nvar tgt = dot.transform(recipe, source);\n\nconsole.log(tgt);\n{\n  \"nr\": 1,\n  \"name\": {\n    \"first\": \"John\",\n    \"last\": \"Doe\"\n  },\n  \"email\": \"example@gmail.com\"\n}\n```\n\n\n### Convert object to dotted-key/value pair\n\n```javascript\nvar dot = require('dot-object');\n\nvar obj = {\n  id: 'my-id',\n  nes: { ted: { value: true } },\n  other: { nested: { stuff: 5 } },\n  some: { array: ['A', 'B'] }\n};\n\nvar tgt = dot.dot(obj);\n\n// or\n\nvar tgt = {};\ndot.dot(obj, tgt);\n\nconsole.log(tgt);\n```\nResult:\n```json\n{\n  \"id\": \"my-id\",\n  \"nes.ted.value\": true,\n  \"other.nested.stuff\": 5,\n  \"some.array.0\": \"A\",\n  \"some.array.1\": \"B\"\n}\n```\n\n## Using a different seperator\n\nIf you do not like dot notation, you are free to specify a different seperator.\n\n```javascript\nvar Dot = require('dot-object');\n\nvar dot = new Dot('->');\n\nvar _s = require('underscore.string');\n\nvar row = {\n  'nr': 200,\n  'doc->name': '    My Document   '\n};\n\nvar mods = {\n  \"doc->name\": [_s.trim, _s.underscored],\n};\n\ndot.object(row, mods);\n\nconsole.log(row);\n```\n\n```\n{\n  \"nr\": 200,\n  \"doc\": {\n    \"name\": \"my_document\"\n  }\n}\n```\n\n## Transforming SQL results to JSON\n\nSQL translation on the fly:\n\n```javascript\n // TODO\n\n```\n\n\n> Copyright Â© 2013 Rob Halff, released under the MIT license\n",
  "readmeFilename": "README.md",
  "_id": "dot-object@1.4.1",
  "dist": {
    "shasum": "b889d3bf3682b2765d80f846fd6afdf03ab558c5"
  },
  "_from": "dot-object@^1.1.0",
  "_resolved": "https://registry.npmjs.org/dot-object/-/dot-object-1.4.1.tgz"
}
