'use-strict';

var _ = require('lodash'),
    utils = require('../lib/utils');


function Type(item){}

function ObjectType(){}
ObjectType.name = 'object';
ObjectType.type = Object;
ObjectType.compare = _.isPlainObject;
utils.inherits(ObjectType, Type);

function StringType(){}
StringType.name = 'string';
StringType.type = String;
StringType.compare = _.isString;
utils.inherits(StringType, Type);

function DateType(){}
DateType.name = 'date';
DateType.type = Date;
DateType.compare = utils.isISO8601;
utils.inherits(DateType, Type);

function BooleanType(){}
BooleanType.name = 'boolean';
BooleanType.type = Boolean;
BooleanType.compare = _.isBoolean;
utils.inherits(BooleanType, Type);

function NumberType(){}
NumberType.type = Number;
NumberType.prototype.test = function(v){
  console.log(v);
});
utils.inherits(NumberType, Type);

function IntegerType(){}
IntegerType.name = 'integer';
IntegerType.compare = utils.isInteger;
utils.inherits(IntegerType, NumberType);

function FloatType(){}
FloatType.name = 'float';
FloatType.compare = utils.isFloat;
utils.inherits(FloatType, NumberType);

function DoubleType(){}
DoubleType.name = 'double';
DoubleType.compare = utils.isFloat;
utils.inherits(DoubleType, NumberType);

function LongType(){}
LongType.name = 'long';
LongType.compare = utils.isLong;
utils.inherits(LongType, NumberType);

function ShortType(){}
ShortType.name = 'short';
ShortType.compare = utils.isShort;
utils.inherits(ShortType, NumberType);

function ByteType(){}
ByteType.name = 'byte';
ByteType.compare = utils.isByte;
utils.inherits(ByteType, NumberType);

function BinaryType(){}
BinaryType.name = 'binary';
BinaryType.compare = utils.isBase64;
utils.inherits(BinaryType, Type);

function GeoPointType(){}
FloatType.name = 'geo_point';
GeoPointType.compare = utils.isFloat;
utils.inherits(GeoPointType, Type);

function Schema(fields, options) {
  Object.defineProperty(this, 'fields', {
    value: fields,
    configurable: false,
    writable: false
  });
  Object.defineProperty(this, 'fieldOptions', {
    value: {},
    configurable: false,
    writable: false
  });
  Object.defineProperty(this, 'mappings', {
    value: mapProperties(this.fields),
    configurable: false,
    writable: false
  });
}

Schema.prototype.
