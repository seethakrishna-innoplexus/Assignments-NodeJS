{
  "name": "express-xml-bodyparser",
  "version": "0.3.0",
  "description": "Simple XML body parser connect/express middleware",
  "author": {
    "name": "Matthias Adler",
    "email": "macedigital@gmail.com",
    "url": "http://matthiasadler.info/"
  },
  "contributors": [
    {
      "name": "asperling",
      "url": "https://github.com/asperling"
    },
    {
      "name": "Pavel Strashkin",
      "url": "https://github.com/xaka"
    },
    {
      "name": "ophentis",
      "url": "https://github.com/ophentis"
    },
    {
      "name": "fiznool",
      "url": "https://github.com/fiznool"
    },
    {
      "name": "dirksen",
      "url": "https://github.com/dirksen"
    }
  ],
  "homepage": "https://github.com/macedigital/express-xml-bodyparser",
  "main": "./index.js",
  "scripts": {
    "test": "mocha --reporter spec --check-leaks --bail test/ 2> /dev/null",
    "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot --check-leaks test/ 2> /dev/null",
    "test-travis": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec --check-leaks test/ 2> /dev/null"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:macedigital/express-xml-bodyparser.git"
  },
  "keywords": [
    "xml",
    "json",
    "middleware",
    "parser",
    "express"
  ],
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/macedigital/express-xml-bodyparser/issues"
  },
  "dependencies": {
    "xml2js": "^0.4.11"
  },
  "devDependencies": {
    "mocha": "^2.2.5",
    "supertest": "^1.0.1",
    "istanbul": "^0.3.7",
    "express": "^3.18"
  },
  "engines": {
    "node": ">=0.10"
  },
  "directories": {
    "test": "test"
  },
  "files": [
    "LICENSE",
    "README.md",
    "index.js",
    "lib/"
  ],
  "readmeFilename": "README.md",
  "readme": "[![NPM Version][npm-image]][npm-url]\n[![Dependency Status][deps-image]][deps-url]\n[![Build Status][ci-image]][ci-url]\n[![Code Coverage status][codecov-image]][codecov-url]\n\n# express-xml-bodyparser\n\nFor those rare cases when you have to parse incoming raw xml-body requests. This middleware works with any connect- or express-based nodejs application. \n\n## Description\n\nAdmittedly, having to deal with XML data has become less common in recent years. Still, there are services and APIs using this format. The middleware is based on the [connect-json middleware](http://www.senchalabs.org/connect/json.html) as a blueprint.\n\nThere is a [similar xml bodyparser](https://github.com/falsecz/connect-xml-bodyparser) module available, but you might appreciate some notable differences:\n\n* Custom configuration options how to deal with XML data.\n* Attempt to parse data only once, even if middleware is called multiple times.\n* Skip data parsing immediately if no req-body has been sent.\n* Accept any XML-based content-type, e.g. `application/rss+xml`\n* No dependency on coffeescript keeping dependencies to a minimum.\n\n## Installation \n\nUtilize [npm](http://npmjs.org/) by typing `npm install express-xml-bodyparser --save` in your projects root folder and your good to go. \n\n## Configuration \n\nYou can pass configuration options into the XML parser middleware. They're exactly the same options you would use for [xml2js](https://github.com/Leonidas-from-XIV/node-xml2js), which this middleware relies on. For further details look at all [available configuration options](https://github.com/Leonidas-from-XIV/node-xml2js#options).\n\n**IMPORTANT:** Currently, it is not advisable to operate xml2js in `async=true` mode. Unless you can absolutely trust input data (which you should not), certain types of invalid XML will throw uncaught exceptions.\nSee https://github.com/Leonidas-from-XIV/node-xml2js/issues/232 for progress on this issue. Until then, the default option is set to `async=false`.\n\nWithout specifying custom options, the middleware applies some opionated defaults meant to normalize the resulting json object properties. All whitespace in text nodes will be trimmed, property and tag names will be lowercased. The parser will always return node lists explicitly cast to Array.\n\n**NOTE:** Custom options will be merged with aforementioned opionated defaults, so in case you want to use `xml2js` defaults, you will have to specify the following:\n\n````javascript\nvar xml2jsDefaults = {\n    explicitArray: false,\n    normalize: false,\n    normalizeTags: false,\n    trim: true\n}\n````\n\nThis change appeared in v0.1.0, older versions would merge options against `xml2js`'s default options.\n\n## Usage \n\nYou can either use express-xml-bodyparser at application level, or for specific routes only. \n\nHere is an example of an express application with default settings:\n\n````javascript\nvar express = require('express'),\n    app = express(),\n    http = require('http'),\n    server = http.createServer(app),\n    xmlparser = require('express-xml-bodyparser');\n\n// .. other middleware ... \napp.use(express.json());\napp.use(express.urlencoded());\napp.use(xmlparser());\n// ... other middleware ... \n\napp.post('/receive-xml', function(req, res, next) {\n\n  // req.body contains the parsed xml\n\n});\n\nserver.listen(1337);\n\n````\n\nIf you wanted to use express-xml-bodyparser for specific routes only, you would do something like this:\n\n````javascript\napp.post('/receive-xml', xmlparser({trim: false, explicitArray: false}), function(req, res, next) {\n  // check req.body  \n});\n````\n\nAbove example demonstrates how to pass custom options to the XML parser. \n\n## Customize mime-type detection\n\nIf you want to customize the regular expression that checks whether the xmlparser should do its work or not, \nyou can provide your own by overloading the `xmlparser.regexp` property, like so: \n\n````javascript\nvar xmlparser = require('express-xml-bodyparser');\nxmlparser.regexp = /^text\\/xml$/i;\n````\n\nDoing so, will allow you to restrict XML parsing to custom mime-types only. Thanks to [@ophentis](https://github.com/ophentis) for the suggestion.\nJust make sure your regular expression actually matches mime-types you're interested in.\nThe feature is available since version v0.0.5.\n\n**IMPORTANT** In versions v0.2.x custom regular expressions were ignored in mime-type parsing. The issue has been fixed in v0.3.0. If you need/rely on this feature, please upgrade to a newer version. Many thanks to [@dirksen](https://github.com/dirksen) who discovered this issue.\n\n## Roadmap to v1.0.0\n\nLets start a discussion how to get to there (stable API).\n\nHere are some thoughts:\n\n* 100% align with [body-parser](https://github.com/expressjs/body-parser)'s error and success handling when dealing with `req.body` and `req.rawBody`.\n* Possibly dropping support for [connect](https://github.com/senchalabs/connect) altogether at one point?\n* Deprecate mutating the `xmlparser` middleware's mime-type regexp in favor of passing customizations into the options parameters (perfect if using route-middlewares).\n* Refactor to use node's StreamAPIv2 (in effect requiring nodejs >= v0.10.x).\n* Require [raw-body](https://github.com/stream-utils/raw-body) with added benefits of limiting request body size and setting charset-encoding based on request data.\n* ~~Provide functional tests incorporating (a~~ny~~ version of) [express](http://expressjs.com/).~~\n\n[npm-image]:https://img.shields.io/npm/v/express-xml-bodyparser.svg?style=flat\n[npm-url]:https://www.npmjs.com/package/express-xml-bodyparser\n[deps-image]:https://david-dm.org/macedigital/express-xml-bodyparser.svg\n[deps-url]:https://david-dm.org/macedigital/express-xml-bodyparser\n[ci-image]: https://travis-ci.org/macedigital/express-xml-bodyparser.svg?style=flat\n[ci-url]: https://travis-ci.org/macedigital/express-xml-bodyparser\n[codecov-image]:https://img.shields.io/codecov/c/github/macedigital/express-xml-bodyparser.svg?style=flat\n[codecov-url]:https://codecov.io/github/macedigital/express-xml-bodyparser\n",
  "_id": "express-xml-bodyparser@0.3.0",
  "dist": {
    "shasum": "bbbd9e39355fad7179984087ef61c7c8e456e01b"
  },
  "_from": "express-xml-bodyparser@",
  "_resolved": "https://registry.npmjs.org/express-xml-bodyparser/-/express-xml-bodyparser-0.3.0.tgz"
}
